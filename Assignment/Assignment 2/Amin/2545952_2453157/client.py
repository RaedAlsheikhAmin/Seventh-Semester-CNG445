from tkinter import *
from tkinter import messagebox
import socket

# Constants 
# ===================================
PORT = 5000
SERVER = "127.0.0.1"

ADDR = (SERVER, PORT)

USERNAME = ""
# ===================================

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(ADDR)

# The function for manager, in case the "role" from the server response is "manager"
# =============================

def manager():
  
  # function to close the window of the manager
  # ===================================
  def close_window():
    client.send("WINDOWCLOSE".encode("utf-8"))
    window.destroy()
  # ===================================
  
  # function for sending the query to the server
  # 
  # it takes the choice from existing radio variables
  # (1,2,3,4) and sends the required query using if-else chain
  # ===================================
  def send_query_to_server():
    
    # sending the report with the chosen number
    # and receiving the corresponding message from the server
    client.send(f"report{radio_var.get()}".encode("utf-8"))
    message_from_server = client.recv(1024).decode("utf-8")
    
    # showing most rented books
    # ===================================
    if radio_var.get() == 1:
      most_rented_books = ""
      for book in message_from_server.split(';')[1:]:
        most_rented_books += f"{book}, "
      most_rented_books = most_rented_books[:-2]
      messagebox.showinfo("Most Rented Book(s)",
                          most_rented_books)
    # ===================================
    
    # showing librarians with highest number of operations
    # ===================================
    elif radio_var.get() == 2:
      most_popular_librarians = ""
      for librarian in message_from_server.split(';')[1:]:
        most_popular_librarians += f"{librarian}, "
      most_popular_librarians = most_popular_librarians[:-2]
      messagebox.showinfo("The librarians with highest number of operations",
                          most_popular_librarians)
    # ===================================
      
    # showing total revenue of the library
    # ===================================
    elif radio_var.get() == 3:
      messagebox.showinfo("Total revenue of the library",
                          f"Library generated a total of {message_from_server.split(';')[1]} $")
    # ===================================
    
    # showing avergae rental period of Harry Potter book
    # ===================================
    elif radio_var.get() == 4:
      messagebox.showinfo('Average rental period of "Harry Potter" book',
                          f'The average rental period of "Harry Potter" book is {message_from_server.split(";")[1]} days.')
    # ===================================
    
  # ===================================
  
  # creating a window
  window = Tk()
  
  # creating and placing the label that says "Reports"
  reports_label = Label(text="Reports")
  reports_label.grid(row=0, column=0)
  
  # creating a radio var that will control the choice of type of report
  radio_var = IntVar()
  
  # creating 4 radio buttons for 4 choices of types of reports
  radio_button_1 = Radiobutton(text=f"(1) What is the most rented book overall?",
                               width=60,
                               anchor="w",
                               justify='left',
                               variable=radio_var,
                               value=1)
  radio_button_2 = Radiobutton(text=f"(2) Which librarian has the highest number of operations?",
                               width=60,
                               anchor="w",
                               justify='left',
                               variable=radio_var,
                               value=2)
  radio_button_3 = Radiobutton(text=f"(3) What is the total revenue generated by library?",
                               width=60,
                               anchor="w",
                               justify='left',
                               variable=radio_var,
                               value=3)
  radio_button_4 = Radiobutton(text=f'(4) What is the average rental period for the "Harry Potter" book?',
                               width=60,
                               anchor="w",
                               justify='left',
                               variable=radio_var,
                               value=4)
  
  # creating "create_button" and "close_button" which creates the chosen report
  # and closes the window, respectively.
  create_button = Button(text="Create", 
                         padx=100, 
                         command=send_query_to_server)
  close_button = Button(text="Close", 
                        command=close_window)
  
  # placing the radio buttons
  radio_button_1.grid(row=1, column=0)
  radio_button_2.grid(row=2, column=0)
  radio_button_3.grid(row=3, column=0)
  radio_button_4.grid(row=4, column=0)
  
  # aligning some blank space to use place() method to place
  # create_button and close_button
  Label(text="", pady=30).grid(row=5, column=1)
  
  # placing create_button and close_button
  create_button.place(x=30, y=130)
  close_button.place(x=300, y=130)
  
  window.mainloop()
  
# =============================


# The function for librarian, in case the "role" from the server response is "librarian"
# =============================

def librarian():
  
  # the function for closing the librarian window
  # ===================================
  def close_window():
    client.send("WINDOWCLOSE".encode("utf-8"))
    window.destroy()
  # ===================================
  
  # function for sending either rent or return message to the server
  # ===================================
  def send_rent_or_return_message_to_server(message):
    # initializnig the message type (rent||return),
    # USERNAME (the username of the librarian),
    # name of the person who wants to do the operation,
    # the date.
    message_to_send = f"{message};"
    message_to_send += f"{USERNAME};"
    message_to_send += f"{client_entry.get()};"
    message_to_send += f"{date_entry.get()};"

    books_ids = [id.get() for id in checkmarks_vars if id.get() > 0]
    
    with open("books.txt") as file:
        books = file.readlines()
    
    # adding book ids to the message for the server
    for id in books_ids:
      message_to_send += f"{id};"
      
    message_to_send = message_to_send[:-1] # clearing semicolon in the end
    client.send(message_to_send.encode("utf-8"))
    
    message_from_server = client.recv(1024).decode("utf-8")
    
    # Each error is displayed differently
    if "error" in message_from_server:
      if message_from_server == "availabilityerror":
        messagebox.showerror("Error", "One of the books you requested is not available right now.")
      elif message_from_server == "renterror":
        messagebox.showerror("Error", "You cannot rent books since you have unreturned books.")
      else:
        messagebox.showerror("Error", "You cannot return these books")
        
    # In case message is "rentsuccess", the client sees the books that he/she succssfully rented
    elif message_from_server == "rentsuccess":
      message_to_display = ""
      for book in books:
        if book.split(';')[0] in books_ids:
          message_to_display += f"{book.split(';')[1]} "
      messagebox.showinfo("Success!", f"Books {message_to_display} have been successfully rented!")
      
    # In case message is "returnsuccess", the client sees which books have been returned
    # with which cost
    elif "returnsuccess" in message_from_server:
      message_to_display = ""
      for book in books:
        if book.split(';')[0] in books_ids:
          message_to_display += f"{book.split(';')[1]} "
      messagebox.showinfo("Success!", 
                          f"Books {message_to_display} have been successfully returned with the cost of {message_from_server.split(';')[1]}!")
    
    
  # creating a window for librarian
  window = Tk()
  window.config(padx=20, pady=20)
  
  # creating books with names and checkmarks
  try:
    with open("books.txt") as file:
      books_list = [item.split(";")[1] for item in file.readlines()]
  except FileNotFoundError:
    messagebox.showinfo("Incorrect Directory",
                        "Try running client.py file in the directory where books.txt file is located")
    return 

  # creating and placing "Books" title
  books_label = Label(text="Books", 
                      pady=15, 
                      font=("Arial", 24, "bold"))
  books_label.grid(row=0, column=0, columnspan=2)

  # these 2 lists are created to manage the chosen books and their ids
  checkmarks_vars = []
  checkmarks_list = []

  # initializing the books from "books.txt"
  for i in range(1, len(books_list) + 1):
    # creating the label with the name of the book and placing it
    book = Label(text=books_list[i-1], 
                anchor="w", 
                justify="left", 
                width=25,
                font=("Arial", 12,"normal"),)
    book.grid(row=i, column=0, columnspan=2)
    
    # appending the IntVar to checkmarks_vars to have control under every checkbox
    checkmarks_vars.append(IntVar())
    
    # creating the checkbox, placing it next to the book title, and appending it to checkmarks_list
    checkmark = Checkbutton(padx=0, variable=checkmarks_vars[i-1], onvalue=i, offvalue=0)
    checkmark.grid(row=i, column=2)
    checkmarks_list.append(checkmark)
    
  # creating and placing date entry
  date_label = Label(text="Date (dd.mm.yyyy): ",
                    font=("Arial", 12, "normal"),
                    justify="left",
                    anchor="w",
                    width=25,
                    pady=20,
                    )
  date_label.grid(row=len(books_list) + 1, column=0, columnspan=2)

  date_entry = Entry(width=15)
  date_entry.grid(row=len(books_list) + 1, column=1, columnspan=2)

  # creating and placing client's name entry
  client_label = Label(text="Client's name: ",
                    font=("Arial", 12, "normal"),
                    justify="left",
                    anchor="w",
                    width=25,
                    pady=20,
                    )
  client_label.grid(row=len(books_list) + 2, column=0, columnspan=2)

  client_entry = Entry(width=15)
  client_entry.grid(row=len(books_list) + 2, column=1, columnspan=2)

  # creating empty space to use place() method to place the buttons 
  Label(text=" ", pady=20).grid(row=len(books_list) + 3, column=0)

  # creating the rent, return, and close buttons and placing them
  rent_button = Button(text="Rent", 
                       font=("Arial", 12, "normal"),
                       command=lambda: send_rent_or_return_message_to_server("rent"))
  rent_button.place(x=35, y=450)
  return_button = Button(text="Return", 
                         font=("Arial", 12, "normal"),
                         command=lambda: send_rent_or_return_message_to_server("return"))
  return_button.place(x=95, y=450)
  close_button = Button(text="Close", 
                        font=("Arial", 12, "normal"),
                        command=close_window)
  close_button.place(x=167, y=450)

  window.mainloop()
# =============================
  
# The function that sends login details to the server and gets a response
# =============================  

def send_login_details_to_server():
  # getting the username of the client and sending the login request to
  # the server
  global USERNAME
  USERNAME = username_entry.get()
  msg = "login;"
  msg += f"{username_entry.get()};"
  msg += f"{password_entry.get()}"
  msg = msg.encode("utf-8")
  client.send(msg)
  server_message = client.recv(1024).decode("utf-8")
  
  # if login was successfull, it looks whether the client is librarian or manager
  # and calls the appropriate functions
  if server_message.split(";")[0] == "loginsuccess":
    print(server_message.split(";")[2].strip() == "librarian")
    if server_message.split(";")[2].strip() == "librarian":
      window.destroy()
      librarian()
    elif server_message.split(";")[2] == "manager":
      window.destroy()
      manager()
  else:
    messagebox.showerror("Error", "Invalid login credentials")
    
# =============================

# Implementing Login window that's going to be destroyed in case of successfull login
# =============================

# creating a window
window = Tk()

# creating a username and password labels
username_label = Label(text="Username: ",
                        font=("Arial", 12, "normal"),
                        pady=10)
password_label = Label(text="Password: ",
                        font=("Arial", 12, "normal"),
                        pady=10)

# creating a username and password entries to allow the user to type
username_entry = Entry()
password_entry = Entry()

# creating a login button
login_button = Button(text="Login",
                      font=("Arial", 12, "normal"),
                      command=send_login_details_to_server)

# placing the username && password labels and entries next to each other
username_label.grid(row=0, column=0)
password_label.grid(row=1, column=0)
username_entry.grid(row=0, column=1, columnspan=2)
password_entry.grid(row=1, column=1, columnspan=2)

# creating empty space to use place() method to place login_button
Label(text=" ", pady=20).grid(row=2, column=0)

# placing the login_button
login_button.place(x=60, y=100)

window.mainloop()

# =============================